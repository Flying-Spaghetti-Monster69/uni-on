// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model DailyMood{
  id         Int      @id @default(autoincrement())
  description String
  mood Int
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Grade {
  id         Int      @id @default(autoincrement())
  grade      Int
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
  userId     String
  assignmentId Int
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assignment {
  id         Int      @id @default(autoincrement())
  title      String
  description String
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
  userId     String
  grades     Grade[]
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  moods         DailyMood[]
  assignments         Assignment[]
  grades         Grade[]
  role          String     @default("user")

  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
